#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAXSIZE 10
#define OK 1
#define FALSE 0

typedef int Elemtype;
typedef bool Status;

typedef struct list
{
    Elemtype *elem; //储存空间的基地址
    int length;     //当前长度
    int listsize;   //当前分配的空间长度
} List;             //顺序表的结构类型为List

void list_init(List *L)
{
    L->elem = (Elemtype *)malloc(MAXSIZE * sizeof(Elemtype)); //开辟空间
    if (L->elem == NULL)                                      //判断空间是否开辟成功
    {
        printf("分配内存失败\n");
        exit(0);
    }
    L->length = 0;         //初始化数据有效数据为0
    L->listsize = MAXSIZE; //初始化数组长度为MAXSIZE
}
Status list_insert(List *L, int i, Elemtype date)
{
    Elemtype *base, *insert, *p;
    if (i < 1 || i > L->length + 1 || L == NULL)
    {
        printf("位置输入错误\n");
        return FALSE;
    }
    if (L->length > L->listsize)
    {
        base = (Elemtype *)realloc(L->elem, (L->listsize + MAXSIZE) * sizeof(Elemtype));
        L->elem = base;
        L->listsize += MAXSIZE;
    }
    insert = &(L->elem[i - 1]); //目标指针指向要插入的目标地址
    //指向最后一个元素的地址
    for (p = L->elem + L->length - 1; p >= insert; p--)
    {
        *(p + 1) = *p;
    }
    *insert = date; 
    L->length++;
    return OK;
}

Status list_delete(List *L, int i)
{
    Elemtype *aim, *p;
    if (i < 0 || i > L->length)
    {
        printf("位置信息输入错误\n");
        return FALSE;
    }
    aim = &(L->elem[i - 1]);       //目标指针指向要删除的目标地址
    p = (L->elem + L->length - 1); //指向最后一个地址
    for (aim = aim + 1; aim <= p; ++aim)
    {
        *(aim - 1) = *aim;
    }
    L->length--;
    return OK;
}
void show_list(List *L)
{
    int i;
    for (i = 0; i < L->length; i++)
    {
        printf("elme[%d]=%d\n", i + 1, L->elem[i]);
    }
    printf("\n");
}
int main()
{
    int i;
    List L;
    list_init(&L);
    for (i = 0; i < 10; i++)
    {
        list_insert(&L, i + 1, i + 1);
    }
    printf("插入前的顺序表\n");
    show_list(&L);

    printf("插入后的顺序表在5位置插入99\n");
    list_insert(&L, 5, 99);
    show_list(&L);

    printf("删除后的顺序表把5位置删除\n");
    list_delete(&L, 5);
    show_list(&L);
    return 0;
}