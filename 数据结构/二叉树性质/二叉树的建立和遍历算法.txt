#include <stdio.h>
#include <stdlib.h>

typedef char ElemType;

typedef struct BiTHode
{
    ElemType data;                       //定义数据域
    struct BiTHode *lchild, *rchild; //指向左右孩子的指针
} BiTHode, *BiTree;

//递归：程序调用自身的编程技巧称为递归
//创建一棵二叉树，约定用户遵照前序遍历方式输入数据
BiTHode *CreateBiTHode(BiTree *T)
{
    char c;

    scanf("%c", &c);
    if (' ' == c)
    {
        *T = NULL;
    }
    else
    {
        *T = (BiTHode *)malloc(sizeof(BiTHode));
        (*T)->data = c;
        CreateBiTHode(&(*T)->lchild);//运用了递归方法
        CreateBiTHode(&(*T)->rchild);//调用自己，产生左右孩子
    }
}

//访问二叉树结点的具体操作，要做什么
BiTHode *visit(char c, int level)
{
    printf("%c位于第%d层\n", c, level);
}

//遍历二叉树
BiTHode *PreOrderTraverse(BiTree T, int level) // level代表层数
{
    if (T)//T不为空指针，往下进行
    {
        visit(T->data, level);                  //访问结点
        //运用递归的方法
        PreOrderTraverse(T->lchild, level + 1); //左孩子结点
        PreOrderTraverse(T->rchild, level + 1); //右孩子结点
    }
}
//中序遍历(左结右)
//后序遍历(右结左)

int main()
{
    int level = 1;
    BiTree T = NULL;

    CreateBiTHode(&T);
    PreOrderTraverse(T, level);
    //因为是递归，所以会加上去再返回为1
    return 0;
}

时间复杂度time:O(n),空间复杂度space:O(height)/O(n)

输入(AB^D^^CE^^^)
输出{
A位于第1层
B位于第2层
D位于第3层
C位于第2层
E位于第3层
}
图示
              A
  B                      C
        D         E

拓展
(1)中序遍历的非递归算法
1、初始化一个空栈S,指针p指向根节点
2、当p非空或者栈S非空时，循环执行以下操作:
.如果p非空，则将p进栈p指向该孩子的作结点；
.如果p为空，则弹出栈顶元素并访问，将p指向该结点的右孩子结点
void InOrder(BiTerr root)  //中序遍历二叉树的非递归算法
{
     InitStack(&S);
     p=root;
     while(p!=NULL||!IsEmpty(&S))
     {
          if(p!=NULL)   //跟指针进栈，遍历左子树
          {
                 Push(&S,p);
                 p=p->lchild;
          }
          else              //跟指针退栈，访问根节点，遍历右子树
          {
                 Pop(&S,&p);
                 Visit(p->data);
                 p=p->rchild;
          }
     }
}

(2)//统计二叉树中叶子结点个数
void countleaf(BiTree T, int len)
{
    if (T != NULL)
    {
        if (T->lchild == NULL && T->rchild == NULL)
        {
            len++;
            return;
        }
        countleaf(T->lchild, len);
        countleaf(T->rchild, len);
    }
}
(3)//复制二叉树
void Copy(BiTree T, BiTree newT)
{
    //如果是空树，递归结束
    if (T == NULL)
    {
        newT = NULL;
        return;
    }
    else //否则执行一下操作
    {
        //申请一个新结点空间，复制根节点
        newT = (TIdu *)malloc(sizeof(TIdu));
        newT->data = T->data;
        Copy(T->lchild, newT->lchild);
        Copy(T->rchild, newT->rchild);
    }
}