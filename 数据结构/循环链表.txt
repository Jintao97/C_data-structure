#include <stdio.h>
#include <stdlib.h>
/*链表存储结构的定义*/
typedef struct CLinkList
{
    int data;
    struct CLinkList *next;
} node;
//初始化循环链表
void initS(node **pNode)
{
    int item;
    node *temp;
    node *target;

    printf("输入结点的值,输入0完成初始化\n");

    while (1)
    {
        scanf("%d", &item);
        fflush(stdin);
        /*fflush(stdin)是一个计算机专业术语，功能是清空输入缓冲区，
        通常是为了确保不影响后面的数据读取
        (例如在读完一个字符串后紧接着又要读取一个字符，
        此时应该先执行fflush(stdin)。”
        */
        if (item == 0)
            return;
        if ((*pNode) == NULL)
        {
            //循环链表中只有一个结点
            *pNode = (node *)malloc(sizeof(struct CLinkList));
            if (!(*pNode))
                exit(0);
            (*pNode)->data = item;
            (*pNode)->next = *pNode;
        }
        else
        {
            /*找到next指向第一个结点的结点*/
            for (target = (*pNode); target->next != (*pNode); target = target->next)
                ;
            //生成一个新结点
            temp = (node *)malloc(sizeof(struct CLinkList));
            if (!temp)
                exit(0);
            temp->data = item;
            temp->next = *pNode;
            target->next = temp;
        }
    }
}
/*插入结点*/
//参数：链表的第一个结点，插入位置
void insertS(node **pNode, int i)
{
    node *temp;
    node *target;
    node *p;
    int item;
    int j = 1;
    printf("输入要插入结点的值：");
    scanf("%d", &item);
    if (i == 1)
    {
        //新插入的结点作为第一个结点
        temp = (node *)malloc(sizeof(struct CLinkList));
        if (!temp)
            exit(0);
        temp->data = item;
        //寻找最后一个结点
        for (target = (*pNode); target->next != (*pNode); target = target->next)
            ;
        temp->next = (*pNode);
        target->next = temp;
        *pNode = temp;
    }
    else
    {
        target = *pNode;
        for (; j < (i - 1); ++j)
        {
            target = target->next;
        }
        // target指向第三个元素的
        temp = (node *)malloc(sizeof(struct CLinkList));
        if (!temp)
            exit(0);
        temp->data = item;
        p = target->next;
        target->next = temp;
        temp->next = p;
    }
}
/*删除结点*/
void deleteS(node **pNode, int i)
{
    node *target;
    node *temp;
    int j = 1;

    if (i == 1)
    {
        //删除第一个结点
        /*找到最后一个结点*/
        for (target = *pNode; target->next != *pNode; target = target->next)
            ;
        temp = *pNode;
        *pNode = (*pNode)->next;
        target->next = *pNode;
        free(temp);
    }
    else
    {
        target = *pNode;
        for (; j < i - 1; ++j)
        {
            target = target->next;
        }
        temp = target->next;
        target->next = temp->next;
        free(temp);
    }
}
/*返回结点所在位置*/
int searchS(node *pNode, int elem)
{
    node *target;
    int i = 1;
    for (target = pNode; target->data != elem && target->next != pNode; i++)
    {
        target = target->next;
    }
    if (target->next = pNode) //表中不存在该元素
        return 0;
    else
        return i;
}
//遍历
void traverseS(node *pNode)
{
    node *temp;
    temp = pNode;
    printf("********链表中的元素********\n");
    do
    {
        printf("%4d", temp->data);
    } while ((temp = temp->next) != pNode);
    printf("\n");
}
int main()
{
    node *pHead = NULL;
    char opp;
    int find;
    printf("----------------------------------\n\n");
    printf("1、初始化链表\n\n2、插入结点\n\n3、删除结点\n\n4、返回结点位置\n\n5、遍历链表\n\n0、退出\n\n");
    while (opp != '0')
    {
        scanf("%c", &opp);
        switch (opp)
        {
        case '1':
            initS(&pHead);
            printf("\n");
            traverseS(pHead);
            break;
        case '2':
            printf("输入插入结点的位置");
            scanf("%d", &find);
            insertS(&pHead, find);
            printf("在位置%d插入值后：\n", find);
            traverseS(pHead);
            printf("\n");
            break;
        case '3':
            printf("输入需要删除的结点位置");
            scanf("%d", &find);
            deleteS(&pHead, find);
            printf("删除第%d个结点后：\n,find");
            traverseS(pHead);
            printf("\n");
            break;
        case '4':
            printf("你要查找倒数第几个结点的值？");
            scanf("%d", &find);
            printf("元素%d所在位置：%d\n", find, searchS(pHead, find));
            // ListTraverse(L);
            printf("\n");
            break;
        case '5':
            traverseS(pHead);
            printf("\n");
            break;
        case '0':
            exit(0);
        }
    }
    return 0;
}


（1）循环杀人
/**
 * 从一开始数数到三杀了，然后再从一开始数，最后剩余两人
 * 
**/
#include <stdio.h>
#include <stdlib.h>

typedef struct node
{
    int data;
    struct node *next;
} node;

node *create(int n)
{
    node *p = NULL, *head;
    head = (node *)malloc(sizeof(node));
    p = head;
    node *s;
    int i = 1;

    if (0 != n)
    {
        while (i <= n)
        {
            s = (node *)malloc(sizeof(node));
            s->data = i++; //为循环列表初始化，第一个结点为1，第二个结点为2
            p->next = s;
            p = s;
        }
        s->next = head->next;
    }
    free(head);

    return s->next;
}

int main()
{
    int n = 41;
    int m = 3;
    int i;
    node *p = create(n);//第一
    node *temp;

    m %= n;

    while (p != p->next)
    {
        for (i = 1; i < m - 1; i++)
        {
            p = p->next;//第二
        }
        printf("%d->", p->next->data);

        temp = p->next;//第三
        p->next = temp->next;//第四
        free(temp);//将第三删除

        p = p->next;//第四等于第一
    }
    printf("%d/n", p->data);

    return 0;
}